# This file contains a configuration snippet for a dual extruder
# printer using dual carriages (an "IDEX" printer).
#

##########################################################
# Define HW configuration in printer.cfg
# add for dual-carriage 
#####################################################################
# [dual_carriage]
# [tmc2209 dual_carriage]
# [extruder1]
# [tmc2209 extruder1]
# [fan_generic fan]   - carriage 0 print cooling fan
# [fan_generic fan1]  - carriage 1 print cooling fan

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_dual_carriage: { }  # e.g. {'auto_exchange':True, 'movespeed': 500, 'feedrate': 30000, 'parking':[ ] }  

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################
  
[gcode_macro _INIT_DUAL_CARRIAGE]
gcode:

 {% if 'dual_carriage' in printer['motion_report'].steppers %}
   {% set name = "dual_carriage" %}    # name variable
   {% set init = { } %}     # default preset   

     # 'endstop_open' = gap (in mm) between toolhead and endstop when parking (mm)
    {% set _dummy = init.update( {'auto_exchange':True, 'movespeed': 500, 'feedrate': 30000, 'endstop_open': 2 , 'disable' : True} ) %}  
      
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
   
 {% endif %}

#####################################################################
# PRINTER ACTIVATE_CARIAGE MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro ACTIVATE_CARRIAGE]  
description: Activate the tool by index EXTRUDER
gcode:
 
   ### params.EXTRUDER = [extruder|extruder1|extruder2|extruder3]
   {% set user_vars = printer["gcode_macro VARIABLE"] %}

   {% set act_speed = printer.gcode_move.speed %}   
   
   {% set target_tool = params.EXTRUDER|default('extruder')|string %}
   {% set default_carriage = 0 if target_tool in user_vars.toolhead[0] else 1 %} 
   {% set act_carriage = 0 if printer.toolhead.extruder in user_vars.toolhead[0] else 1 %}    
    
   ### set TOOL    
   {% if act_carriage|int != default_carriage|int %}
  
    ### Reset TMC current for parking carriage 
      {% set park_carriage = 1 if printer.toolhead.extruder in user_vars.toolhead[0] else 0 %}    
      {% set axis = printer.configfile.settings.dual_carriage.axis %}  
      {% set stepper = ('stepper_'+axis,'dual_carriage')[park_carriage|int] %}
  
      {% for object in printer.configfile.config|sort %}
       {% if 'tmc' is in object and object.split(' ')[1]  == stepper %}     
          {% set run_current = printer.configfile.settings[object].run_current|float %}  
           {% set msg = ("Set %s driver run current to %s A" % (object.split(' ')[1],run_current|round(2))) %}  
           {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
           RESPOND MSG='{msg}' 
           SET_TMC_CURRENT STEPPER={stepper} CURRENT={run_current}
       {% endif %}        
      {% endfor %}	     
        
      
      ### parking the active carriage to endstop position   
          {% if user_vars.dual_carriage.sync_exchange  %}  
              SYNC_CHANGE_CARRIAGE EXTRUDER={target_tool}
          {% elif user_vars.dual_carriage.auto_exchange  %}  
             PARK_CARRIAGE            
          {% endif %}      

       ### set extruder / tool 
        ACTIVATE_TOOL EXTRUDER={target_tool}
   
        ### set carriage            
        SET_DUAL_CARRIAGE CARRIAGE={default_carriage}   

        ### restore position 
            {% if user_vars.dual_carriage.sync_exchange  %}   
              ## ignore change carriage
            {% elif user_vars.dual_carriage.auto_exchange  %}  
              CHANGE_CARRIAGE                                 
           {% endif %}        
         
        ### switch CARRIAGE Print cooling fan          
            TOOLHEAD_PRINT_FAN

       ### restore speed
       G1 F{act_speed}    

       ### Set TMC current for parking carriage  
       {% set axis = printer.configfile.settings.dual_carriage.axis %}  
       {% set stepper = ('stepper_'+axis,'dual_carriage')[act_carriage|int] %}
  
       {% for object in printer.configfile.config|sort %}
         {% if 'tmc' is in object  and object.split(' ')[1]  == stepper %}  
            {% set msg = ("Set %s driver run current to %s A" % (object.split(' ')[1],0.3)) %}  
            {% if printer.configfile.config['display'] %}   M117 {msg}   {% endif %}  
             RESPOND MSG='{msg}' 
             SET_TMC_CURRENT STEPPER={stepper} CURRENT=0.3
         {% endif %}        
       {% endfor %}	       
   
     {% else %}       
         {action_respond_info("The carriage is alredy activated.")}
     {% endif %} 


####################################################################

[gcode_macro PARK_CARRIAGE]
description: Park the active toolhead.
gcode:
 #{action_respond_info(">>>>> run gcode_macro  PARK_CARRIAG")}
  {% set user_vars = printer["gcode_macro VARIABLE"] %} 

  # {% set act_carriage = printer.dual_carriage.active_carriage.lstrip('CARRIAGE_') %}
  {% set act_carriage = 0 if printer.toolhead.extruder in user_vars.toolhead[0] else 1 %} 


#  {% if user_vars.dual_carriage.auto_exchange %}  
     
   ### Reset activate tool Offsets  
      SET_GCODE_OFFSET X=0 Y=0 Z=0	
    
   {%  set x_pos = printer.gcode_move.gcode_position.x %}
   {%  set y_pos = printer.gcode_move.gcode_position.y %}
   {%  set z_pos = printer.gcode_move.gcode_position.z %}
   
     ### create variable 'gcode_position'
        {% set gcode_position = user_vars.dual_carriage %}
        {% set _dummy = gcode_position.update( {'gcode_position':{ 'x': x_pos|float, 'y': y_pos|float , 'z': z_pos|float }}  ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=dual_carriage  VALUE="{gcode_position}" 
  	
    
    ### parking the active carriage to endstop position according to the "axis" configuration in [dual_cariage]
    {% set axis = printer.configfile.settings.dual_carriage.axis %}  
  
    {% set stepper = ('stepper_'+axis,'dual_carriage')[act_carriage|int] %}
    #G1 {axis + (printer.configfile.config[(stepper)].position_endstop)} F{user_vars.dual_carriage.feedrate}  

     ### gap (in mm) between toolhead and endstop when parking (mm)
     {% set endstop_open = (printer.configfile.config[(stepper)].position_endstop)|int + ( user_vars.dual_carriage.endstop_open|int , user_vars.dual_carriage.endstop_open|int * -1 )[act_carriage|int] %}  
     G1 {axis + endstop_open|string } F{user_vars.dual_carriage.feedrate}  

    
#  {% endif %} 

####################################################################

[gcode_macro CHANGE_CARRIAGE]
description: Change the new carriage.
gcode:

  #{action_respond_info(">>>>> run gcode_macro  CHANGE_CARRIAGE")}
  {% set user_vars = printer["gcode_macro VARIABLE"] %}   
      
#   {% if user_vars.dual_carriage.auto_exchange %} 

     ### Apply activate tool Offsets    
      {% set target_tool =  printer.toolhead.extruder %}  
      {% set tool_nr = target_tool.lstrip("extruder") if target_tool.lstrip("extruder")|length != 0 else 0 %} 
      {% set offset =  user_vars.hotend_offset[tool_nr|int] %}   
          SET_GCODE_OFFSET X={offset.x} Y={offset.y} Z={offset.z  + user_vars.active.z.print_offset}

     ### restore position befor park carrige  
      {% set gcode_position = user_vars.dual_carriage.gcode_position %}
      {%  set x_pos = gcode_position.x  %}
      {%  set y_pos = gcode_position.y  %}
      {%  set z_pos = gcode_position.z  %}
          G1 X{x_pos|string} Y{y_pos|string} Z{z_pos|string} F{user_vars.dual_carriage.feedrate}    

     ### delete variable  'gcode_position'
        {% set gcode_position = user_vars.dual_carriage %}
          {% set _dummy = gcode_position.pop( 'gcode_position' ) %}
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=dual_carriage  VALUE="{gcode_position}" 
  
#   {% endif %} 











          

