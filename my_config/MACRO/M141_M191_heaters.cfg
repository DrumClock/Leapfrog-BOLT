##########################################################
# Define HW configuration in printer.cfg
##########################################################

###  define Chamber heater:

#   [heater_generic chamber]  >  gcode_id: c
#   [heater_fan chamber]      >  is a fan that will be enabled whenever its associated heater is active. 
#   [temperature_sensor  chamber_space]   > info temperature in the chamber space
 
### Other 'heaters' define:  

#   [heater_generic heater_0] > gcode_id: 0
#   [heater_generic heater_1] > gcode_id: 1    
#   [heater_generic heater_2] > gcode_id: 2    
#   etc.
##########################################################

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_heater : {  }          # e.g. { 'c' :'chamber', '0' :'heater_0' }

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_HEATER_GENERIC]
gcode:

 {% set user_vars = printer["gcode_macro VARIABLE"] %}   

  ### init defautl variable
  {% set name = "heater" %}    # name variable
  {% set init = { } %}     # default preset   
 
 {% for heater in printer.heaters.available_sensors|sort %} ; check for all available sensors      
  {% if 'heater_generic' in heater %}   
    {% set gcode_id = printer.configfile.config[(heater)].gcode_id %} 
    {% set name = heater.split(' ')[1] %}   
       {% set _dummy = init.update( { gcode_id : name } ) %}      
   {% endif %}
 {% endfor %} 

  ### save variable
  SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"

  {action_respond_info("Creating a list of variables for macro M141/M191") if printer.save_variables.variables.dump_list }
  
#####################################################################
# HEATER_GENERIC - MANAGEMENT
# Function description: 
#
#  M141 S30 (HC)  -  set temp for Chamber - [heater_generic] = gcode_id: c
#  M191 H0 S30    -  set temp and wait for heater - [heater_generic] = gcode_id: 0
#
#####################################################################

[gcode_macro M141]
description: set temp for Chamber or other heaters
gcode:

   ### params H= gcode_id for [heater_generic ...]
         
      SET_HEATER_GENERIC   H={params.H|default("c")}  S={params.S|default(0)|float}  WAIT=False

 
#####################################################################

[gcode_macro M191]
description: set temp for Chamber or other heaters
gcode:

     ### params H= gcode_id for [heater_generic ...]      
     ### accepted R from Marlin G-code
      SET_HEATER_GENERIC   H={params.H|default("c")}  S={params.R|default(0)|float if params.R is defined else params.S|default(0)|float}  WAIT=True

 
 #####################################################################
[gcode_macro SET_HEATER_GENERIC]
description: SET_HEATER_GENERIC  HC  S65  WAIT='False'
gcode:

    {% set user_vars = printer["gcode_macro VARIABLE"] %}  

    {% if (params.H|lower) not in user_vars.heater %} 
           {action_respond_info("param H%s is not defined for G-code M141/M191." % (params.H))} 
           
    {% else %}     
         {% set target_heater = user_vars.heater[params.H]  if params.H is defined  else  user_vars.heater.C  %}      ## 'C' : 'chamber' 
         {% set target_temp = params.S|default(0)|float %} 
         {% set wait = params.WAIT|default('False')%}   

         {% set sensor = ("heater_generic %s" % target_heater) %}
         {% set max_temp = (printer.configfile.settings[sensor].max_temp|float|round(1)) %}        
    
         {% if target_temp <  max_temp %}
              SET_HEATER_TEMPERATURE HEATER="{target_heater}" TARGET={target_temp}  
              {% if wait =='True'  and target_temp > 0.0 %}                 
                 TEMPERATURE_WAIT  SENSOR="{sensor}"  MINIMUM={target_temp - 2.0} MAXIMUM={target_temp + 2.0}
              {% endif %}
         {% else %}
              {action_respond_info("Aborted, target %3.1f\u00B0C exedes max_temp config limit" % target_temp)}
         {% endif %}    

   {% endif %}  
   
   
   
        
  
     
