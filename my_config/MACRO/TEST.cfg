[gcode_macro TEST_XY]
gcode:

 {% if printer['virtual_sdcard'].is_active != true %}   
   ### Only if it doesn't print!
   
 {% set act_speed = printer.gcode_move.speed %}  

 ### define config value
 {% set max_velocity =  printer.configfile.config['printer'].max_velocity %}
 {% set max_accel =  printer.configfile.config['printer'].max_accel %}
 
 {% set x_min = (printer.configfile.config['stepper_x'].position_min)|int +10 %}
 {% set x_max = (printer.configfile.config['stepper_x'].position_max)|int -10 %}
 {% set y_min = (printer.configfile.config['stepper_y'].position_min)|int +10 %}
 {% set y_max = (printer.configfile.config['stepper_y'].position_max)|int -10 %}

 ### define  params
 {% set speed = (params.SPEED|default(max_velocity))|int %}
 {% set accel = (params.ACCEL|default(max_accel))|int %}
  
 {% if "xy" not in printer.toolhead.homed_axes %}
   G28
 {% endif %} 

 {% set msg_1 =(" set ACCEL = %s mm/s2 " % accel) %}
 {% set msg_2 =(" set VELOCITY = %s mm/s " % speed ) %}
 {% set msg_3 =(" test AREA = [%s,%s x %s,%s]" % (x_min, y_min ,x_max, y_max)) %}
   RESPOND MSG='{msg_3}'
   RESPOND MSG='{msg_2}' 
   RESPOND MSG='{msg_1}' 

 ### set test 
  SET_VELOCITY_LIMIT ACCEL={accel}
  SET_VELOCITY_LIMIT VELOCITY={speed}
  
  G0 F {speed *60 }  

  G1 X{x_min} Y{y_min} 
 
  ### square test
  G1 X{x_max} 
  G1 Y{y_max}     
  G1 X{x_min} 
  G1 Y{y_min}
  
  ### cross test
  G1 X{x_max} Y{y_max} 
  G1 X{x_min}
  G1 X{x_max} Y{y_min} 
  G1 X{x_min}
  
  ### centered
  G1 X{x_max/2} Y{y_max/2}  
  
  ### set default cfg 
  SET_VELOCITY_LIMIT ACCEL={max_accel}
  SET_VELOCITY_LIMIT VELOCITY={max_velocity}
  
  G1 F{act_speed}

  {% endif %}
  

 #----------------------------------------------------------



[gcode_macro TEST_STEPPER_Z]
gcode:

  STEPPER_BUZZ STEPPER=stepper_x
  STEPPER_BUZZ STEPPER=dual_carriage
  STEPPER_BUZZ STEPPER=stepper_y
  STEPPER_BUZZ STEPPER=stepper_y1


[gcode_macro TEST]
gcode: 

  {% set user_vars = printer["gcode_macro VARIABLE"] %}   

#  {% set reject = ['configfile','gcode_macro','bed_mesh','gcode','mcu','save_variables'] %}

#    {% for object in printer|sort %}
#       {% for test in reject|sort %}           
#          {% if ("'%s'" % test) is not in object %} 
#             {action_respond_info("%s" % object )}
#          {% endif %}    
#       {% endfor %}
#    {% endfor %}


#-----------------------------------------
[gcode_macro CALIBRATE_DELTA_BED_TEMP]
description: CALIBRATE_DELTA_BED_TEMP  TEMP=80
gcode:  
   
 {% set user_vars = printer["gcode_macro VARIABLE"] %} 

 {% if user_vars.bed_temp.sensor == "heater_bed" %}
   RESPOND MSG="Not defined bed_plate temp sensor !" 
 
 {% else %}
    {% set name = "bed_temp" %}    # name variable
    {% set init = user_vars[name] %}   
               
    {% if not params %}
      ### no params defined
            RESPOND MSG="example: CALIBRATE_DELTA_BED_TEMP    TEMP=80" 
                 
    {% else %}      
       {% set temp_param=params.TEMP|default(80)|int if params.TEMP is defined else -1 %}    
          {% if  temp_param  >   printer.configfile.settings.heater_bed.max_temp|float|round(1) %}
               {action_respond_info("Aborted, target %3.1f\u00B0C exedes max_temp config limit" % temp_param)}
          {% else %}
# ---------------------------------------------------------------------------------------------------------------------                   
            
          # SET_HEATER_TEMPERATURE HEATER=heater_bed  TARGET={temp_param}
          # TEMPERATURE_WAIT SENSOR=heater_bed  MINIMUM={ temp_param - 1 }   MAXIMUM={ temp_param + 1 }

          # {% if temp_para != -1 %}            
            UPDATE_DELAYED_GCODE ID=_MEASURING_DELTA_TEMPERATURES DURATION=60 
          #{% endif %}                           
          
          #SET_HEATER_TEMPERATURE HEATER=heater_bed  TARGET=0                   
# ---------------------------------------------------------------------------------------------------------------------                   
          {% endif %}         
   {% endif %}          
 {% endif %}
  
########################################################################### 
[delayed_gcode _MEASURING_DELTA_TEMPERATURES]
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %}     
  {% set plate_sensor = ("temperature_sensor %s"  %  user_vars.bed_temp.sensor) %}
  
  {% set plate_temp = (printer[plate_sensor].temperature)|int %}
  {% set bed_temp = (printer['heater_bed'].temperature)|int %}
  {% set delta_temp = bed_temp  - plate_temp %}

  {% set msg = ("bed:%s - plate:%s = delta:%s" % (bed_temp,plate_temp,delta_temp)) %}
   RESPOND MSG='{msg}'    

    CALIBRATE_DELTA_BED_TEMP TEMP=80 




     
       